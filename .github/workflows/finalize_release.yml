name: Finalize Release

# Se ejecuta cuando se hace merge de una PR de release a main
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  finalize-release:
    name: Finalizar release
    runs-on: ubuntu-latest
    # Solo ejecutar si la PR fue merged y viene de una rama release
    if: |
      github.event.pull_request.merged == true &&
      startsWith(github.event.pull_request.head.ref, 'release/')
    
    steps:
    - name: Checkout repositorio
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configurar Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Extraer versión de la rama
      id: extract-version
      run: |
        BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        VERSION=${BRANCH_NAME#release/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "✅ Versión extraída: $VERSION"
        echo "✅ Rama release: $BRANCH_NAME"
    
    - name: Crear tag de release
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        TAG_NAME="v$VERSION"
        
        echo "🏷️ Creando tag $TAG_NAME"
        
        # Cambiar a main y asegurar que está actualizado
        git checkout main
        git pull origin main
        
        # Crear tag anotado
        git tag -a "$TAG_NAME" -m "Release $VERSION
        
        Cambios incluidos en esta versión:
        - Merge de rama release/$VERSION
        - PR #${{ github.event.pull_request.number }}
        
        Creado automáticamente por GitHub Actions"
        
        # Push del tag
        git push origin "$TAG_NAME"
        
        echo "✅ Tag $TAG_NAME creado exitosamente"
    
    - name: Crear GitHub Release
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.extract-version.outputs.version }}';
          const tagName = `v${version}`;
          
          // Obtener commits desde el último release
          let releaseNotes = '';
          try {
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 1
            });
            
            const lastRelease = releases[0];
            if (lastRelease) {
              const { data: comparison } = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: lastRelease.tag_name,
                head: tagName
              });
              
              releaseNotes = '## 📋 Cambios en esta versión:\n\n';
              comparison.commits.forEach(commit => {
                const message = commit.commit.message.split('\n')[0];
                releaseNotes += `- ${message} (${commit.sha.substring(0, 7)})\n`;
              });
            }
          } catch (error) {
            console.log('No se pudo generar notas automáticas:', error.message);
            releaseNotes = '## 📋 Cambios en esta versión:\n\nVer commits para detalles.';
          }
          
          const releaseBody = `
          ${releaseNotes}
          
          ## 🔗 Enlaces útiles:
          - [Pull Request #${{ github.event.pull_request.number }}](${{ github.event.pull_request.html_url }})
          - [Comparar cambios](https://github.com/${{ github.repository }}/compare/v${version}...main)
          
          ---
          *Release creado automáticamente desde rama release/${version}*
          `;
          
          const release = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: tagName,
            name: `Release ${version}`,
            body: releaseBody,
            draft: false,
            prerelease: false
          });
          
          console.log(`✅ GitHub Release creado: ${release.data.html_url}`);
    
    - name: Merge de vuelta a develop
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        BRANCH_NAME="${{ steps.extract-version.outputs.branch_name }}"
        
        echo "🔄 Haciendo merge de $BRANCH_NAME de vuelta a develop"
        
        # Cambiar a develop y actualizarlo
        git checkout develop
        git pull origin develop
        
        # Merge de la rama release
        git merge origin/$BRANCH_NAME --no-ff -m "chore: merge release/$VERSION back to develop
        
        - Incluye cambios del release $VERSION
        - Sincroniza develop con main después del release
        
        [skip-ci]"
        
        # Push a develop
        git push origin develop
        
        echo "✅ Merge a develop completado"
    
    - name: Limpiar rama release
      run: |
        BRANCH_NAME="${{ steps.extract-version.outputs.branch_name }}"
        
        echo "🧹 Eliminando rama $BRANCH_NAME"
        
        # Eliminar rama remota
        git push origin --delete $BRANCH_NAME
        
        echo "✅ Rama $BRANCH_NAME eliminada"
    
    - name: Comentar en la PR
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.extract-version.outputs.version }}';
          const tagName = `v${version}`;
          
          const comment = `
          ## 🎉 Release finalizado exitosamente!
          
          ✅ **Tag creado:** [\`${tagName}\`](https://github.com/${{ github.repository }}/releases/tag/${tagName})
          ✅ **GitHub Release:** [Ver release](https://github.com/${{ github.repository }}/releases/tag/${tagName})
          ✅ **Merge a develop:** Completado
          ✅ **Rama release:** Eliminada
          
          El release **${version}** está ahora disponible en producción! 🚀
          `;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ github.event.pull_request.number }},
            body: comment
          });
    
    - name: Resumen de la ejecución
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        echo "## 🎉 Release $VERSION Finalizado" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Tareas completadas:" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ Tag v$VERSION creado" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 GitHub Release publicado" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 Merge de vuelta a develop" >> $GITHUB_STEP_SUMMARY
        echo "- 🧹 Rama release eliminada" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Enlaces:" >> $GITHUB_STEP_SUMMARY
        echo "- [Ver release](https://github.com/${{ github.repository }}/releases/tag/v$VERSION)" >> $GITHUB_STEP_SUMMARY
        echo "- [Ver en main](https://github.com/${{ github.repository }}/tree/main)" >> $GITHUB_STEP_SUMMARY