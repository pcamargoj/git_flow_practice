name: Validate Release

# Se ejecuta en PRs hacia main desde ramas release
on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  validate-release:
    name: Validar release
    runs-on: ubuntu-latest
    # Solo ejecutar si viene de una rama release
    if: startsWith(github.head_ref, 'release/')
    
    steps:
    - name: Checkout repositorio
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Configurar Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    
    - name: Extraer versi√≥n de la rama
      id: extract-version
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        VERSION=${BRANCH_NAME#release/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "‚úÖ Versi√≥n detectada: $VERSION"
    
    - name: Validar formato de versi√≥n
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Formato de versi√≥n inv√°lido: $VERSION"
          echo "Formato esperado: x.y.z (ej: 1.2.0)"
          exit 1
        fi
        echo "‚úÖ Formato de versi√≥n v√°lido"
    
    - name: Verificar que no existe tag
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        TAG_NAME="v$VERSION"
        
        if git tag -l | grep -q "^$TAG_NAME$"; then
          echo "‚ùå Error: El tag $TAG_NAME ya existe"
          exit 1
        fi
        echo "‚úÖ El tag $TAG_NAME no existe"
    
    - name: Ejecutar tests unitarios
      id: unit-tests
      run: |
        echo "üß™ Ejecutando tests unitarios..."
        if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ]; then
          python -m pytest -v --tb=short
        else
          python -m unittest discover -s tests -v
        fi
        echo "‚úÖ Tests unitarios pasaron"
    
    - name: Verificar cobertura de c√≥digo
      if: success()
      run: |
        echo "üìä Verificando cobertura de c√≥digo..."
        if command -v coverage &> /dev/null; then
          coverage run -m pytest
          coverage report --fail-under=80
          echo "‚úÖ Cobertura de c√≥digo adecuada"
        else
          echo "‚ö†Ô∏è Coverage no instalado, saltando verificaci√≥n"
        fi
    
    - name: Linting y formato de c√≥digo
      if: success()
      run: |
        echo "üîç Verificando calidad de c√≥digo..."
        
        # Flake8 para linting
        if command -v flake8 &> /dev/null; then
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "‚úÖ Linting pas√≥"
        fi
        
        # Black para formato
        if command -v black &> /dev/null; then
          black --check .
          echo "‚úÖ Formato de c√≥digo correcto"
        fi
    
    - name: Verificar archivos de versi√≥n
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        echo "üîç Verificando archivos de versi√≥n..."
        
        # Verificar setup.py si existe
        if [ -f "setup.py" ]; then
          if grep -q "version.*$VERSION" setup.py; then
            echo "‚úÖ Versi√≥n actualizada en setup.py"
          else
            echo "‚ö†Ô∏è Versi√≥n no encontrada en setup.py"
          fi
        fi
        
        # Verificar pyproject.toml si existe
        if [ -f "pyproject.toml" ]; then
          if grep -q "version.*$VERSION" pyproject.toml; then
            echo "‚úÖ Versi√≥n actualizada en pyproject.toml"
          else
            echo "‚ö†Ô∏è Versi√≥n no encontrada en pyproject.toml"
          fi
        fi
        
        # Verificar __init__.py si existe
        if [ -f "src/__init__.py" ]; then
          if grep -q "__version__.*$VERSION" src/__init__.py; then
            echo "‚úÖ Versi√≥n actualizada en __init__.py"
          else
            echo "‚ö†Ô∏è Versi√≥n no encontrada en __init__.py"
          fi
        fi
    
    - name: Verificar CHANGELOG
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        echo "üìù Verificando CHANGELOG..."
        
        if [ -f "CHANGELOG.md" ]; then
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "‚úÖ Versi√≥n $VERSION encontrada en CHANGELOG.md"
          else
            echo "‚ö†Ô∏è Versi√≥n $VERSION no encontrada en CHANGELOG.md"
            echo "Considera agregar una entrada para esta versi√≥n"
          fi
        else
          echo "‚ö†Ô∏è CHANGELOG.md no encontrado"
          echo "Considera crear un CHANGELOG para documentar cambios"
        fi
    
    - name: Verificar documentaci√≥n
      run: |
        echo "üìö Verificando documentaci√≥n..."
        
        # Verificar README
        if [ -f "README.md" ]; then
          echo "‚úÖ README.md existe"
        else
          echo "‚ö†Ô∏è README.md no encontrado"
        fi
        
        # Verificar docs/ si existe
        if [ -d "docs/" ]; then
          echo "‚úÖ Directorio docs/ existe"
        fi
    
    - name: An√°lisis de seguridad
      if: success()
      run: |
        echo "üîí Ejecutando an√°lisis de seguridad..."
        
        # Safety para vulnerabilidades en dependencias
        if command -v safety &> /dev/null; then
          safety check
          echo "‚úÖ No se encontraron vulnerabilidades conocidas"
        fi
        
        # Bandit para an√°lisis de c√≥digo Python
        if command -v bandit &> /dev/null; then
          bandit -r . -f json || true
          echo "‚úÖ An√°lisis de seguridad completado"
        fi
    
    - name: Generar reporte de validaci√≥n
      if: always()
      run: |
        VERSION="${{ steps.extract-version.outputs.version }}"
        
        echo "## üìã Reporte de Validaci√≥n - Release $VERSION" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.unit-tests.outcome }}" == "success" ]; then
          echo "‚úÖ **Tests unitarios:** Pasaron" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Tests unitarios:** Fallaron" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "‚úÖ **Formato de versi√≥n:** V√°lido ($VERSION)" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Tag √∫nico:** Verificado" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Enlaces √∫tiles:" >> $GITHUB_STEP_SUMMARY
        echo "- [Comparar cambios](https://github.com/${{ github.repository }}/compare/main...${{ github.head_ref }})" >> $GITHUB_STEP_SUMMARY
        echo "- [Ver rama release](https://github.com/${{ github.repository }}/tree/${{ github.head_ref }})" >> $GITHUB_STEP_SUMMARY
    
    - name: Comentar resultado en PR
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.extract-version.outputs.version }}';
          const testsStatus = '${{ steps.unit-tests.outcome }}';
          
          let statusIcon = testsStatus === 'success' ? '‚úÖ' : '‚ùå';
          let statusText = testsStatus === 'success' ? 'Todas las validaciones pasaron' : 'Algunas validaciones fallaron';
          
          const comment = `
          ## ${statusIcon} Validaci√≥n de Release ${version}
          
          ### üìä Resultados:
          ${testsStatus === 'success' ? '‚úÖ' : '‚ùå'} **Tests unitarios**
          ‚úÖ **Formato de versi√≥n**
          ‚úÖ **Tag √∫nico**
          ‚úÖ **Calidad de c√≥digo**
          
          ### üìã Estado: ${statusText}
          
          ${testsStatus === 'success' ? 
            'üöÄ Esta PR est√° lista para ser merged y crear el release.' : 
            '‚ö†Ô∏è Por favor, revisa los errores antes de hacer merge.'}
          
          ---
          *Validaci√≥n autom√°tica ejecutada por GitHub Actions*
          `;
          
          // Buscar comentario existente
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes('Validaci√≥n de Release')
          );
          
          if (existingComment) {
            // Actualizar comentario existente
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            // Crear nuevo comentario
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }