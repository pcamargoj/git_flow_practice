name: Auto Create Release Branch

# Se ejecuta autom√°ticamente cuando se hace push a develop con [create-release]
on:
  push:
    branches: [ develop ]

jobs:
  check-release-trigger:
    name: Verificar trigger de release
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[create-release]')
    
    outputs:
      should_create_release: ${{ steps.extract-version.outputs.version != '' }}
      version: ${{ steps.extract-version.outputs.version }}
    
    steps:
    - name: Extraer versi√≥n del commit
      id: extract-version
      run: |
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        echo "Mensaje del commit: $COMMIT_MSG"
        
        # Buscar patr√≥n [create-release:x.y.z] en el mensaje
        if [[ $COMMIT_MSG =~ \[create-release:([0-9]+\.[0-9]+\.[0-9]+)\] ]]; then
          VERSION="${BASH_REMATCH[1]}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "‚úÖ Versi√≥n encontrada: $VERSION"
        else
          echo "‚ùå No se encontr√≥ versi√≥n v√°lida en el mensaje del commit"
          echo "Formato esperado: [create-release:1.2.0]"
          exit 1
        fi

  create-release:
    name: Crear rama release autom√°ticamente
    runs-on: ubuntu-latest
    needs: check-release-trigger
    if: needs.check-release-trigger.outputs.should_create_release == 'true'
    
    steps:
    - name: Checkout repositorio
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Configurar Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Verificar que la rama release no existe
      run: |
        VERSION="${{ needs.check-release-trigger.outputs.version }}"
        RELEASE_BRANCH="release/$VERSION"
        
        if git ls-remote --heads origin $RELEASE_BRANCH | grep -q $RELEASE_BRANCH; then
          echo "‚ùå Error: La rama $RELEASE_BRANCH ya existe"
          exit 1
        fi
        echo "‚úÖ La rama $RELEASE_BRANCH no existe, se puede crear"
    
    - name: Crear rama release
      run: |
        VERSION="${{ needs.check-release-trigger.outputs.version }}"
        RELEASE_BRANCH="release/$VERSION"
        
        echo "üîÑ Creando rama $RELEASE_BRANCH desde develop"
        
        # Asegurar que estamos en develop actualizado
        git checkout develop
        git pull origin develop
        
        # Crear y cambiar a la nueva rama release
        git checkout -b $RELEASE_BRANCH
        
        # Push de la nueva rama
        git push origin $RELEASE_BRANCH
        
        echo "‚úÖ Rama $RELEASE_BRANCH creada exitosamente"
    
    - name: Crear Pull Request autom√°tico
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.check-release-trigger.outputs.version }}';
          const releaseBranch = `release/${version}`;
          
          const prBody = `
          ## üöÄ Release ${version}
          
          Esta PR prepara el release **${version}** para producci√≥n.
          
          ### üìã Checklist antes del merge:
          - [ ] ‚úÖ Todas las pruebas pasan
          - [ ] üìù CHANGELOG.md actualizado
          - [ ] üî¢ Versi√≥n actualizada en archivos de configuraci√≥n
          - [ ] üß™ Pruebas de integraci√≥n completadas
          - [ ] üìö Documentaci√≥n actualizada
          - [ ] üîç Code review completado
          
          ### üîÑ Proceso de release:
          1. **Revisar y aprobar esta PR**
          2. **Merge a main** - Esto crear√° el tag de release autom√°ticamente
          3. **Merge de vuelta a develop** - Para sincronizar cambios
          
          ### üìä Cambios incluidos:
          Revisa los commits desde el √∫ltimo release para ver qu√© se incluye.
          
          ---
          *Creado autom√°ticamente desde commit: ${{ github.event.head_commit.id }}*
          `;
          
          const pr = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üöÄ Release ${version}`,
            head: releaseBranch,
            base: 'main',
            body: prBody,
            draft: false
          });
          
          // Agregar labels
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.data.number,
            labels: ['release', 'auto-created']
          });
          
          console.log(`‚úÖ Pull Request creada: #${pr.data.number}`);
          
          // Agregar comentario al commit original
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: '${{ github.event.head_commit.id }}',
            body: `üöÄ Release branch \`${releaseBranch}\` creada autom√°ticamente.\n\nüìã [Ver Pull Request #${pr.data.number}](${pr.data.html_url})`
          });
    
    - name: Notificar en Slack (opcional)
      if: env.SLACK_WEBHOOK_URL != ''
      run: |
        VERSION="${{ needs.check-release-trigger.outputs.version }}"
        curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \"üöÄ Nueva rama release creada: \`release/${VERSION}\`\",
            \"blocks\": [
              {
                \"type\": \"section\",
                \"text\": {
                  \"type\": \"mrkdwn\",
                  \"text\": \"üöÄ *Nueva rama release creada*\n\n*Versi√≥n:* ${VERSION}\n*Repositorio:* ${{ github.repository }}\n*Creada desde:* develop\"
                }
              },
              {
                \"type\": \"actions\",
                \"elements\": [
                  {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"Ver rama\"
                    },
                    \"url\": \"https://github.com/${{ github.repository }}/tree/release/${VERSION}\"
                  }
                ]
              }
            ]
          }" ${{ env.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}